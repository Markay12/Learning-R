{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Learning How to Code with R Introduction This documentation is going to be heavily focused on learning how to use R for the purpose of Data Analysis. Like Python, R is a powerful tool that can be used for data analysis. What is Data Science? Data science is a discipline that allows the user to turn raw data into something that is understandable. It provides insight and knowledge to those who are viewing it. Data science is a large field and uses math and figures to display new meanings to equations and life around us. The main methods that are used include Importing Data Tidying up the Methods Transforming the Methods Visualizing the Methods Modeling the Methods Communicating the Methods The first thing you need to do is to import your data into R. This is done through a file, database or an API. Secondly, you are going to need to tidy up your data. This means you store it in a consistent form that matches the semantics of the dataset. When data is tidy, each column is a variable and each row is an observation. The common next steps are to transform, visualize and model the data. Transforming includes narrowing the observations of interest, creating new variables that are functions of existin variables and calculating a set of summary statistics. Visualizing the data shows you new things that you wouldn't expect and may raise new questions about the data. This may also show the person representing the data that something is wrong when everything does not line up. Models are complementary to visuals. Once you know the questions you are asking, you can use a model to answer your questions. Models are a mathematical and computational tool and scale well. The last step is communication, this is absolutely crucial to any data analysis projeect. You must be able to communicate your finidings to people that are going to be reading or viewing your models/data. Pre-requisites These are the pre-requisites to help you learn from this site and to follow along. There are four main things you are going to need. R R Studio tidyverse (Explained Later) Other Packages R To download R, go to CRAN, the comprehensive R archive network. CRAN is composed of a set of mirror servers distributed around the world and is used to distribute R and R packages. Don\u2019t try and pick a mirror that\u2019s close to you: instead use the cloud mirror, https://cloud.r-project.org, which automatically figures it out for you. R Studio RStudio is an integrated development environment, or IDE, for R programming. Download and install it from http://www.rstudio.com/download. RStudio is updated a couple of times a year. When a new version is available, RStudio will let you know. It\u2019s a good idea to upgrade regularly so you can take advantage of the latest and greatest features. For this book, make sure you have at least RStudio 1.0.0. Tidyverse You\u2019ll also need to install some R packages. An R package is a collection of functions, data, and documentation that extends the capabilities of base R. Using packages is key to the successful use of R. The majority of the packages that you will learn in this book are part of the so-called tidyverse. The packages in the tidyverse share a common philosophy of data and R programming, and are designed to work together naturally. You can install the complete tidyverse with a single line of code: install.packages(\"tidyverse\") Other Packages There are many other excellent packages that are not part of the tidyverse, because they solve problems in a different domain, or are designed with a different set of underlying principles. This doesn\u2019t make them better or worse, just different. In other words, the complement to the tidyverse is not the messyverse, but many other universes of interrelated packages. As you tackle more data science projects with R, you\u2019ll learn new packages and new ways of thinking about data. Other three packages: install.packages(c(\"nycflights13\", \"gapminder\", \"Lahman\"))","title":"Introduction"},{"location":"#welcome-to-learning-how-to-code-with-r","text":"","title":"Welcome to Learning How to Code with R"},{"location":"#introduction","text":"This documentation is going to be heavily focused on learning how to use R for the purpose of Data Analysis. Like Python, R is a powerful tool that can be used for data analysis.","title":"Introduction"},{"location":"#what-is-data-science","text":"Data science is a discipline that allows the user to turn raw data into something that is understandable. It provides insight and knowledge to those who are viewing it. Data science is a large field and uses math and figures to display new meanings to equations and life around us. The main methods that are used include Importing Data Tidying up the Methods Transforming the Methods Visualizing the Methods Modeling the Methods Communicating the Methods The first thing you need to do is to import your data into R. This is done through a file, database or an API. Secondly, you are going to need to tidy up your data. This means you store it in a consistent form that matches the semantics of the dataset. When data is tidy, each column is a variable and each row is an observation. The common next steps are to transform, visualize and model the data. Transforming includes narrowing the observations of interest, creating new variables that are functions of existin variables and calculating a set of summary statistics. Visualizing the data shows you new things that you wouldn't expect and may raise new questions about the data. This may also show the person representing the data that something is wrong when everything does not line up. Models are complementary to visuals. Once you know the questions you are asking, you can use a model to answer your questions. Models are a mathematical and computational tool and scale well. The last step is communication, this is absolutely crucial to any data analysis projeect. You must be able to communicate your finidings to people that are going to be reading or viewing your models/data.","title":"What is Data Science?"},{"location":"#pre-requisites","text":"These are the pre-requisites to help you learn from this site and to follow along. There are four main things you are going to need. R R Studio tidyverse (Explained Later) Other Packages","title":"Pre-requisites"},{"location":"#r","text":"To download R, go to CRAN, the comprehensive R archive network. CRAN is composed of a set of mirror servers distributed around the world and is used to distribute R and R packages. Don\u2019t try and pick a mirror that\u2019s close to you: instead use the cloud mirror, https://cloud.r-project.org, which automatically figures it out for you.","title":"R"},{"location":"#r-studio","text":"RStudio is an integrated development environment, or IDE, for R programming. Download and install it from http://www.rstudio.com/download. RStudio is updated a couple of times a year. When a new version is available, RStudio will let you know. It\u2019s a good idea to upgrade regularly so you can take advantage of the latest and greatest features. For this book, make sure you have at least RStudio 1.0.0.","title":"R Studio"},{"location":"#tidyverse","text":"You\u2019ll also need to install some R packages. An R package is a collection of functions, data, and documentation that extends the capabilities of base R. Using packages is key to the successful use of R. The majority of the packages that you will learn in this book are part of the so-called tidyverse. The packages in the tidyverse share a common philosophy of data and R programming, and are designed to work together naturally. You can install the complete tidyverse with a single line of code: install.packages(\"tidyverse\")","title":"Tidyverse"},{"location":"#other-packages","text":"There are many other excellent packages that are not part of the tidyverse, because they solve problems in a different domain, or are designed with a different set of underlying principles. This doesn\u2019t make them better or worse, just different. In other words, the complement to the tidyverse is not the messyverse, but many other universes of interrelated packages. As you tackle more data science projects with R, you\u2019ll learn new packages and new ways of thinking about data. Other three packages: install.packages(c(\"nycflights13\", \"gapminder\", \"Lahman\"))","title":"Other Packages"},{"location":"data_visual/","text":"Data Visualisation Introduction Learn how to visualise data with ggplot2. R has several systems for making graphs, but ggplot2 is the most elegant and versatile. ggplot2 implements the grammar of graphics , which is a coherent system for describing and building graphs. You need to first make sure that you have tidyverse as described in the first page introduction. To do this again you use the line, install.packages(\"tidyverse\") Let's Begin I've got a question... Do cars with big engines use more fuel than cars with small engines? What does the relationship between engine size and fuel efficiency look like? mpg Data Frame This answer can be tested with the mpg data frame found in ggplot2. This is done with ggplot2::mpg . What is a data frame? A data frame is a rectangular collection of variables (columns) and observations (rows). This mpg data containts observations collected by the US Environmental Protection Agency on 38 models of cars. This is what your I/O will look like. This uses mpg as your input. > mpg # A tibble: 234 \u00d7 11 manufacturer model displ year cyl trans drv cty hwy fl class <chr> <chr> <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr> 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact 3 audi a4 2 2008 4 manual(m6) f 20 31 p compact 4 audi a4 2 2008 4 auto(av) f 21 30 p compact 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compact 7 audi a4 3.1 2008 6 auto(av) f 18 27 p compact 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 26 p compact 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 25 p compact 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 28 p compact # \u2026 with 224 more rows The general variables found in this chart containts displ , which is the car's engine size in litres hwy , which is a car's fuel efficiency on the highway, in miles per gallon. A car with low fuel efficiency will consume more gas than are car with better fuel efficiency. Creating a ggplot To plot mpg, you can run the same code and put dipl on the x-axis and hwy on the y-axis. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) This will result in a plot that looks something like this. From this data we can easily see a negative relationship between engine size and fuel efficiency. In other words this means that cars with larger engines use more fuel in a shorter amount of time than smaller cars. ggplot() creates a coordinate system that you can add layers to. The first argument of ggplot() is the dataset to use in the graph. This means that our first argument ggplot(data = mpg) created an empty graph. Using geom_point() adds layers of points to the plot creating a scatter plot. Each geometry function with ggplot2 takes a mapping argument. This defines how variables in the dataset are mapped to visual properties. The mapping argument is always paired with aes and the x/y arguments of aes() . Graphing Template The template for graphing something in R is -> ggplot(data = <DATA>) + <GEOM_FUNC>(mapping = aes(<MAPPINGS>)) Try comparing hwy and cyl . What do you see? What does this data mean? Does having more cylinders mean worse highway mileage. Aesthetic Mappings In a plot, what do we do when we have outliers that are way out from where the normal data is? You can hypothesize what these cars are. They are most likely going to be hybrid cars and that sounds like a reasonable explanation. The cars are classified by the mpg dataset as subcompact, minivan, midsize, 2seater and pickup. This is found in the class section of the dataset. You can add your own third variable, like class , to a two dimensional scatterplot by mapping it to an aesthetic. This is a visual property of the objects in the plot. This includes things like shape, size and color of the points. You can thus change the levels of a point's size, shape and color to make the point anything you would like! You can do this with our previous graph and now color code the displ and hwy mileage by the class of car. This is simple, easy and only adds on one command to the general line in R. ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy, color=class)) To assign normal aesthetics to a variable, you can associate the name to the name of the variable with aes() . The assignment of this change is called scaling . Colors can reveal things about a set of data that you otherwise would not have thought of. Instead of mapping the class of the cars to colors, we can map them to different sizes. To do this, you just change it from color to size. ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy, size = class)) Note: you should not use size for a discrete variable (countable size, not infinite) Two others you can use are alpha and shape aesthetics which change the opacity of the points or the shape of the points respectively. By default ggplot2 only uses six shapes. This means that any more than six points will not be plotted. Therefore, that is why SUV's are not on this final plot for shapes. Once an aesthetic is mapped, ggplot2 finishes the rest of the computations and math. It will select a reasonable scale to use and constructs its own legend. For x and y aesthetics, ggplot2 does not create a legend but adds them to the axis lines. These axes act as a legend. Aesthetics can be set manually as well. You can easily make all points on your plot green with: ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy), color = \"green\") The color doesn't convey any information about the variable but only changes the color of the points. Facets One way to add additional variables is with aesthetics. Another way, which is useful for categorical variables, is to split the plot into facets , subplots that each display one subset of data. To facet a plot by a single variable, you want to use facet_wrap() . The variable that is passed in here should be discrete. ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_wrap(~ class, nrow = 2) You can also do this with the combination of two variables. This is done with facet_grid() . The first arg is also a formula( ~ ) and separates the variable names. ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_grid(drv ~ cyl)","title":"Data Visualisation"},{"location":"data_visual/#data-visualisation","text":"","title":"Data Visualisation"},{"location":"data_visual/#introduction","text":"Learn how to visualise data with ggplot2. R has several systems for making graphs, but ggplot2 is the most elegant and versatile. ggplot2 implements the grammar of graphics , which is a coherent system for describing and building graphs. You need to first make sure that you have tidyverse as described in the first page introduction. To do this again you use the line, install.packages(\"tidyverse\")","title":"Introduction"},{"location":"data_visual/#lets-begin","text":"I've got a question... Do cars with big engines use more fuel than cars with small engines? What does the relationship between engine size and fuel efficiency look like?","title":"Let's Begin"},{"location":"data_visual/#mpg-data-frame","text":"This answer can be tested with the mpg data frame found in ggplot2. This is done with ggplot2::mpg . What is a data frame? A data frame is a rectangular collection of variables (columns) and observations (rows). This mpg data containts observations collected by the US Environmental Protection Agency on 38 models of cars. This is what your I/O will look like. This uses mpg as your input. > mpg # A tibble: 234 \u00d7 11 manufacturer model displ year cyl trans drv cty hwy fl class <chr> <chr> <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr> 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact 3 audi a4 2 2008 4 manual(m6) f 20 31 p compact 4 audi a4 2 2008 4 auto(av) f 21 30 p compact 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compact 7 audi a4 3.1 2008 6 auto(av) f 18 27 p compact 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 26 p compact 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 25 p compact 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 28 p compact # \u2026 with 224 more rows The general variables found in this chart containts displ , which is the car's engine size in litres hwy , which is a car's fuel efficiency on the highway, in miles per gallon. A car with low fuel efficiency will consume more gas than are car with better fuel efficiency.","title":"mpg Data Frame"},{"location":"data_visual/#creating-a-ggplot","text":"To plot mpg, you can run the same code and put dipl on the x-axis and hwy on the y-axis. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) This will result in a plot that looks something like this. From this data we can easily see a negative relationship between engine size and fuel efficiency. In other words this means that cars with larger engines use more fuel in a shorter amount of time than smaller cars. ggplot() creates a coordinate system that you can add layers to. The first argument of ggplot() is the dataset to use in the graph. This means that our first argument ggplot(data = mpg) created an empty graph. Using geom_point() adds layers of points to the plot creating a scatter plot. Each geometry function with ggplot2 takes a mapping argument. This defines how variables in the dataset are mapped to visual properties. The mapping argument is always paired with aes and the x/y arguments of aes() .","title":"Creating a ggplot"},{"location":"data_visual/#graphing-template","text":"The template for graphing something in R is -> ggplot(data = <DATA>) + <GEOM_FUNC>(mapping = aes(<MAPPINGS>)) Try comparing hwy and cyl . What do you see? What does this data mean? Does having more cylinders mean worse highway mileage.","title":"Graphing Template"},{"location":"data_visual/#aesthetic-mappings","text":"In a plot, what do we do when we have outliers that are way out from where the normal data is? You can hypothesize what these cars are. They are most likely going to be hybrid cars and that sounds like a reasonable explanation. The cars are classified by the mpg dataset as subcompact, minivan, midsize, 2seater and pickup. This is found in the class section of the dataset. You can add your own third variable, like class , to a two dimensional scatterplot by mapping it to an aesthetic. This is a visual property of the objects in the plot. This includes things like shape, size and color of the points. You can thus change the levels of a point's size, shape and color to make the point anything you would like! You can do this with our previous graph and now color code the displ and hwy mileage by the class of car. This is simple, easy and only adds on one command to the general line in R. ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy, color=class)) To assign normal aesthetics to a variable, you can associate the name to the name of the variable with aes() . The assignment of this change is called scaling . Colors can reveal things about a set of data that you otherwise would not have thought of. Instead of mapping the class of the cars to colors, we can map them to different sizes. To do this, you just change it from color to size. ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy, size = class)) Note: you should not use size for a discrete variable (countable size, not infinite) Two others you can use are alpha and shape aesthetics which change the opacity of the points or the shape of the points respectively. By default ggplot2 only uses six shapes. This means that any more than six points will not be plotted. Therefore, that is why SUV's are not on this final plot for shapes. Once an aesthetic is mapped, ggplot2 finishes the rest of the computations and math. It will select a reasonable scale to use and constructs its own legend. For x and y aesthetics, ggplot2 does not create a legend but adds them to the axis lines. These axes act as a legend. Aesthetics can be set manually as well. You can easily make all points on your plot green with: ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy), color = \"green\") The color doesn't convey any information about the variable but only changes the color of the points.","title":"Aesthetic Mappings"},{"location":"data_visual/#facets","text":"One way to add additional variables is with aesthetics. Another way, which is useful for categorical variables, is to split the plot into facets , subplots that each display one subset of data. To facet a plot by a single variable, you want to use facet_wrap() . The variable that is passed in here should be discrete. ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_wrap(~ class, nrow = 2) You can also do this with the combination of two variables. This is done with facet_grid() . The first arg is also a formula( ~ ) and separates the variable names. ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_grid(drv ~ cyl)","title":"Facets"},{"location":"geometric_objects/","text":"Geometric Objects A geom is the geometrical object that a plot uses to represent data. People often descibe plots by the type of geom that the plot uses. Bar charts use bar geoms, line charts use line geoms etc. To change the geom in your plot, change the grom function that you added to the ggplot(). Try out: # left plot ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy)) # right plot ggplot(data=mpg) + geom_smooth(mapping = aes(x=displ, y=hwy)) You will notice that the first graph looks the same as before, but the second graph looks a little different. All geom functions in ggplot2 takes a mapping argument. However, not every aesthetic works with every geom. You can set the shape of a point, but you couldn't set the \"shape\" of the line. You can set the linetype of a line. geom_smooth() will draw a different line. ggplot(data=mpg) + geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv)) This separates the cars into three lines based on their drv value, which describes the drivetrain. You can see how these lines look with the original data to get a better overall representation. > ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv)) + geom_point(mapping = aes(x=displ, y=hwy, color = drv)) ggplot2 has over 40 geoms, and extension packages which can provide even more. The best way to get a comprehensive overview is a ggplot2 cheat sheet. I personally use: this link . You can also use ?geom_smooth while in R Studio and replace smooth with whatever you're curious about. Here are some certain customizations that you can try out. ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy)) ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, group = drv)) ggplot(data = mpg) + geom_smooth( mapping = aes(x = displ, y = hwy, color = drv), show.legend = FALSE ) To display multiple geoms on one plot yoou can just add them after you're done with one like this: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + geom_smooth(mapping = aes(x = displ, y = hwy)) If you want to show the same data (both the same x and y variables), you can just specify the new plot you want to show. You do not need to say which ones are x and y vars each time. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth() If you are to place mappings in a geom function, ggplot2 treats them as local mappings for the layer. It will use these mappings to extend or overwrite the global mappings for ONLY THAT LAYER. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth() Now, only the point plot will have changed colors and not the smooth plot. The smooth plot will still use the global mapping. This same idea can be used to specify different data for each later. In this example, the smooth line displays a subset of the mpg dataset. The local data argument in geom_smooth() overrides the global data argument in ggplot() for only that layer. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == \"subcompact\"), se = FALSE)","title":"Geometric Visualisation"},{"location":"geometric_objects/#geometric-objects","text":"A geom is the geometrical object that a plot uses to represent data. People often descibe plots by the type of geom that the plot uses. Bar charts use bar geoms, line charts use line geoms etc. To change the geom in your plot, change the grom function that you added to the ggplot(). Try out: # left plot ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy)) # right plot ggplot(data=mpg) + geom_smooth(mapping = aes(x=displ, y=hwy)) You will notice that the first graph looks the same as before, but the second graph looks a little different. All geom functions in ggplot2 takes a mapping argument. However, not every aesthetic works with every geom. You can set the shape of a point, but you couldn't set the \"shape\" of the line. You can set the linetype of a line. geom_smooth() will draw a different line. ggplot(data=mpg) + geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv)) This separates the cars into three lines based on their drv value, which describes the drivetrain. You can see how these lines look with the original data to get a better overall representation. > ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv)) + geom_point(mapping = aes(x=displ, y=hwy, color = drv)) ggplot2 has over 40 geoms, and extension packages which can provide even more. The best way to get a comprehensive overview is a ggplot2 cheat sheet. I personally use: this link . You can also use ?geom_smooth while in R Studio and replace smooth with whatever you're curious about. Here are some certain customizations that you can try out. ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy)) ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, group = drv)) ggplot(data = mpg) + geom_smooth( mapping = aes(x = displ, y = hwy, color = drv), show.legend = FALSE ) To display multiple geoms on one plot yoou can just add them after you're done with one like this: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + geom_smooth(mapping = aes(x = displ, y = hwy)) If you want to show the same data (both the same x and y variables), you can just specify the new plot you want to show. You do not need to say which ones are x and y vars each time. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth() If you are to place mappings in a geom function, ggplot2 treats them as local mappings for the layer. It will use these mappings to extend or overwrite the global mappings for ONLY THAT LAYER. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth() Now, only the point plot will have changed colors and not the smooth plot. The smooth plot will still use the global mapping. This same idea can be used to specify different data for each later. In this example, the smooth line displays a subset of the mpg dataset. The local data argument in geom_smooth() overrides the global data argument in ggplot() for only that layer. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == \"subcompact\"), se = FALSE)","title":"Geometric Objects"},{"location":"stat_transforms/","text":"Statistical Transformations","title":"Statistical Tranformations"},{"location":"stat_transforms/#statistical-transformations","text":"","title":"Statistical Transformations"}]}